# Generated by Selenium IDE
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.action_chains import ActionChains
import time

from core import selenium


class TestModel():
    def setup_method(self, method):
        options = webdriver.ChromeOptions()
        self.driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
        self.vars = {}
  
    def teardown_method(self, method):
        self.driver.quit()
  
    def test_model(self):
        self.driver.get("http://localhost:5000/login")
        self.driver.set_window_size(1050, 748)
        self.driver.find_element(By.ID, "email").click()
        self.driver.find_element(By.ID, "email").send_keys("user1@example.com")
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "password").send_keys("1234")
        self.driver.find_element(By.ID, "submit").click()
        self.driver.find_element(By.LINK_TEXT, "Sample dataset 4").click()
        
        # Función auxiliar para intentar clics múltiples en caso de que el elemento esté bloqueado
        def click_element(locator):
            attempts = 3
            for _ in range(attempts):
                try:
                    element = WebDriverWait(self.driver, 10).until(EC.element_to_be_clickable(locator))
                    ActionChains(self.driver).move_to_element(element).perform()  # Scroll al elemento
                    element.click()
                    return
                except selenium.common.exceptions.ElementClickInterceptedException:
                    time.sleep(1)  # Espera y reintenta si el elemento está bloqueado
        
        # Hacer clic en la estrella de calificación
        click_element((By.CSS_SELECTOR, "#star-rating-11 > .mini-star:nth-child(3)"))
        
        # Hacer clic en el botón de calificación
        click_element((By.CSS_SELECTOR, "#rating-container-11 > #mini-rate-btn"))
        
        # Esperar hasta que la alerta esté presente y gestionarla
        WebDriverWait(self.driver, 10).until(EC.alert_is_present())
        alert = self.driver.switch_to.alert
        assert alert.text == "Calificación guardada"
        alert.accept()
        
        # Hacer clic en el menú desplegable
        click_element((By.CSS_SELECTOR, ".text-dark"))
        
        # Hacer clic en la opción de logout
        click_element((By.CSS_SELECTOR, ".dropdown-menu > .dropdown-item:nth-child(2)"))
        
        self.driver.close()
